---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import type { Testimonial } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  callToAction,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

function isBrowser() {
  return typeof window !== 'undefined';
}

async function fetchGitHubUser(githubUrl) {
  if (isBrowser()) {
    const cachedData = localStorage.getItem(githubUrl);
    if (cachedData) {
      return JSON.parse(cachedData);
    }
  }

  try {
    const response = await fetch(githubUrl);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    const userData = {
      name: data.name,
      avatar_url: data.avatar_url,
    };
    if (isBrowser()) {
      localStorage.setItem(githubUrl, JSON.stringify(userData));
    }
    return userData;
  } catch (error) {
    console.error('Error fetching GitHub user:', error);
    return null;
  }
}

const processedTestimonials = await Promise.all(
  testimonials.map(async (testimonial) => {
    if (testimonial.githubLink) {
      const githubUser = await fetchGitHubUser(testimonial.githubLink);
      if (githubUser) {
        return {
          ...testimonial,
          name: githubUser.name || testimonial.name,
          image: { src: githubUser.avatar_url },
        };
      }
    }
    return testimonial;
  })
);
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 justify-items-center">
    {
      processedTestimonials &&
        processedTestimonials.map(({ name, job, image, bio }) => (
          <div class="flex flex-col items-center justify-between h-auto w-full max-w-sm p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600">
            {image && (
              <div class="flex-grow flex items-center justify-center p-4">
                <img
                  class="rounded-full border border-slate-200 dark:border-slate-600"
                  src={image.src}
                  alt={name}
                  width="120"
                  height="120"
                  loading="lazy"
                  decoding="async"
                />
              </div>
            )}
            <div class="text-center mt-4">
              {name && <p class="text-lg font-semibold">{name}</p>}
              {job && <p class="text-xs text-muted">{job}</p>}
              {bio && <p class="text-sm text-muted mt-2">{bio}</p>}
            </div>
          </div>
        ))
    }
  </div>

  {
    callToAction && (
      <div class="flex justify-center mx-auto w-fit mt-8 md:mt-12 font-medium">
        <Button {...callToAction} />
      </div>
    )
  }
</WidgetWrapper>
